(
Copyright © 2022 Lior Stern

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
“Software”), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
)

( disassembler )

%SHORT_MODE_MASK { #20 }
%RETURN_MODE_MASK { #40 }
%KEEP_MODE_MASK { #80 }
%OPCODE_MASK { #1f }

%EMIT { .Console/write DEO }
%NEWLINE { #0a EMIT }
%TAB { #09 EMIT }
%SPACE { #20 EMIT }
%OPEN_PAREN { #28 EMIT }
%CLOSE_PAREN { #29 EMIT }

%OPCODE_LIT { #00 }

|0000
@System
	&vector	$2
	&wst	$1
	&rst	$1
	&_	$4
	&red	$2
	&green	$2
	&blue	$2
	&debug	$1
	&state	$1

|0010
@Console
	&vector	$2
	&read	$1
	&_	$5
	&write	$1
	&error	$1

|00a0
@File
	&vector		$2
	&success	$2
	&stat		$2
	&delete		$1
	&append		$1
	&name		$2
	&length		$2
	&read		$2
	&write		$2

( Zero page variables )
|0000
@rom-offset			$2
@instruction			$1
@opcode				$1
@keep-mode			$1
@short-mode			$1
@return-mode			$1
@file-name-buffer-offset	$2

|0100 ( entry point )
	#0000 .rom-offset STZ2
	#0000 .file-name-buffer-offset STZ2
	;on-console .Console/vector DEO2
BRK

( Called when a console event occurs, handles only input events )
@on-console ( -- )
	(
		Read intput file name.
		The cli arguments are injected to the console device
		by the emulator, ending with a newline character.
	)
	.Console/read DEI DUP
	( Write file name to file-name-buffer )
	#0a EQU ,&file-name-end JCN
	;file-name-buffer .file-name-buffer-offset LDZ2 ADD2 STA
	.file-name-buffer-offset LDZ2 INC2 .file-name-buffer-offset STZ2
BRK
&file-name-end
	(
		The cli argument was loaded.
		Setup the file device for reading.
	)
	POP
	.file-name-buffer-offset LDZ2 .File/length DEO2
	;file-name-buffer .File/name DEO2

@file-read-loop ( -- )
	( read an instruction )
	.File/read DEI DUP
	.File/success DEI2 #0000 EQU2 ;eof JCN2
	.instruction STZ

	( Set flags, current instruction is on the stack )
	DUPk DUP
	SHORT_MODE_MASK AND .short-mode STZ
	RETURN_MODE_MASK AND .return-mode STZ
	KEEP_MODE_MASK AND .keep-mode STZ
	OPCODE_MASK AND DUP .opcode STZ

	;emit-ram-offset JSR2 TAB

	( opcode is on the stack ) OPCODE_LIT NEQ ,&non-lit-opcode JCN
		;handle-lit JSR2
		NEWLINE
		;file-read-loop JMP2
	&non-lit-opcode

	( Print opcode name )
	#00 .opcode LDZ
	#0003 MUL2
	;opcode-name-table ADD2
	LDAk EMIT
	INC2 LDAk EMIT
	INC2 LDA EMIT

	( Emit 2,k or r if the relevant flags are on )
	.short-mode LDZ #00 EQU ,&after-print-short JCN
		LIT "2 EMIT
	&after-print-short
	.keep-mode LDZ #00 EQU ,&after-print-keep JCN
		LIT "k EMIT
	&after-print-keep
	.return-mode LDZ #00 EQU ,&after-print-return JCN
		LIT "r EMIT
	&after-print-return

	TAB TAB ;emit-instruction-as-comment JSR2

	NEWLINE
	.rom-offset LDZ2 INC2 .rom-offset STZ2
	;file-read-loop JMP2

( Emit # when the keep flag is on, emit LIT when the return flag is on )
@emit-lit-prefix ( -- )
	.return-mode LDZ ,&emit-litr-prefix JCN
	LIT "# EMIT
JMP2r
&emit-litr-prefix
	LIT "L EMIT
	LIT "I EMIT
	LIT "T EMIT
	.short-mode LDZ ,&emit-lit-2r-prefix JCN
	,&emit-litr-end JMP
&emit-lit-2r-prefix
	LIT "2 EMIT
&emit-litr-end
	LIT "r EMIT
	SPACE
JMP2r

( Emit \t when the keep flag is on, nothing when the short and return flags are on )
@emit-lit-postfix ( -- )
	.return-mode LDZ RETURN_MODE_MASK EQU
	.short-mode LDZ SHORT_MODE_MASK EQU
	AND ,&emit-lit-postfix-end JCN
	TAB
&emit-lit-postfix-end
JMP2r

( Handle LIT BRK or fallback to just raw data )
@handle-lit ( -- )
	( Instruction is 0x20, 0x40 or 0x60 )
	.instruction LDZ
	DUP #20 EQU 	( instruction )
	OVR #40 EQU ORA	( instruction instruction==0x20 )
	SWP #60 EQU ORA ( instruction instruction==0x20|instruction==0x40 )
			( instruction==0x20|instruction==0x40|instruction==0x60 )
	;emit-raw-byte JCN2

	.keep-mode LDZ #00 EQU ;emit-brk JCN2

	.short-mode LDZ ,&emit-short-literal JCN

( Print the instruction and the following byte as a byte literal. Example: `#ff` )
&emit-byte-literal
	.File/read DEI
	.File/success DEI2 #0000 EQU2 ,&truncated-literal-byte JCN
	DUP
	;emit-lit-prefix JSR2
	;emit-byte JSR2
	;emit-lit-postfix JSR2

	( Print bytes as comment )
	TAB
	OPEN_PAREN
	SPACE
	.instruction LDZ ;emit-byte JSR2
	;emit-byte JSR2
	SPACE
	CLOSE_PAREN

	.rom-offset LDZ2 INC2 INC2 .rom-offset STZ2
JMP2r
&truncated-literal-short ( the second byte of a short literal is missing )
	POP
&truncated-literal-byte ( the first byte of a literal is missing )
	POP
	;undo-lit-read JSR2
	;emit-raw-byte JMP2

( Print the instruction and the following short as a short literal. Example: `#ffff` )
&emit-short-literal
	.File/read DEI
	.File/success DEI2 #0000 EQU2 ,&truncated-literal-byte JCN
	.File/read DEI
	.File/success DEI2 #0000 EQU2 ,&truncated-literal-short JCN
	;emit-lit-prefix JSR2
	DUP2
	;emit-short JSR2
	;emit-lit-postfix JSR2

	( Print bytes as comment )
	TAB
	OPEN_PAREN
	SPACE
	.instruction LDZ ;emit-byte JSR2
	;emit-short JSR2
	SPACE
	CLOSE_PAREN

	.rom-offset LDZ2 #0003 ADD2 .rom-offset STZ2
JMP2r

( Print the instruction as raw data. Example: `ff` )
@emit-raw-byte ( -- )
	.instruction LDZ ;emit-byte JSR2
	.rom-offset LDZ2 INC2 .rom-offset STZ2
JMP2r

( Print the BRK instruction )
@emit-brk ( -- )
	LIT "B EMIT
	LIT "R EMIT
	LIT "K EMIT
	TAB TAB ;emit-instruction-as-comment JSR2
	.rom-offset LDZ2 INC2 .rom-offset STZ2
JMP2r

( Halt the program )
@eof
	POP
	#01 .System/state DEO
	BRK ( Exit evaluation context so the state change will take effect )

( Print .instruction's value as a comment )
@emit-instruction-as-comment
	OPEN_PAREN
	SPACE
	.instruction LDZ ;emit-byte JSR2
	SPACE
	CLOSE_PAREN
JMP2r

( Print address )
@emit-ram-offset
	LIT "| EMIT
	.rom-offset LDZ2 #0100 ADD2
	;emit-short JMP2

( Print a number between 0 to 65535 to the screen in hexadecimal )
@emit-short ( short -- )
	SWP
	;emit-byte JSR2
	;emit-byte JMP2

( Print a number between 0 to 255 to the screen in hexadecimal )
@emit-byte ( byte -- )
	DUP
	#f0 AND #04 SFT ;emit-nibble JSR2
	#0f AND ;emit-nibble JMP2

( Print a number between 0 to 15 to the screen in hexadecimal )
@emit-nibble ( byte -- )
	#00 SWP ;hex-table ADD2 LDA EMIT
JMP2r

( Rewind the ROM file cursor to rom-offset+1 )
@undo-lit-read ( -- )
	;file-name-buffer .File/name DEO2 ( Re open the file )
	.rom-offset LDZ2
	DUP2 #0000 EQU2 ,&end JCN
&read-again
	.File/read DEI POP
	#0001 SUB2
	DUP2 #0000 EQU2 ,&end JCN
	,&read-again JMP
&end
	POP2
	.File/read DEI POP
JMP2r

@hex-table
"0123456789
"abcdef

@opcode-name-table
"LIT
"INC
"POP
"NIP
"SWP
"ROT
"DUP
"OVR
"EQU
"NEQ
"GTH
"LTH
"JMP
"JCN
"JSR
"STH
"LDZ
"STZ
"LDR
"STR
"LDA
"STA
"DEI
"DEO
"ADD
"SUB
"MUL
"DIV
"AND
"ORA
"EOR
"SFT

@file-name-buffer
