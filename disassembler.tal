( disassembler )

%SHORT_MODE_MASK { #20 }
%RETURN_MODE_MASK { #40 }
%KEEP_MODE_MASK { #80 }
%OPCODE_MASK { #1f }

%EMIT { #18 DEO }
%NEWLINE { #0a EMIT }
%TAB { #09 EMIT }

%OPCODE_LIT { #00 }

|0000
@System
	&vector	$2
	&wst	$1
	&rst	$1
	&_	$4
	&red	$2
	&green	$2
	&blue	$2
	&debug	$1
	&state	$1

|0010
@Console
	&vector	$2
	&read	$1
	&_	$5
	&write	$1
	&error	$1

|00a0
@File
	&vector		$2
	&success	$2
	&stat		$2
	&delete		$1
	&append		$1
	&name		$2
	&length		$2
	&read		$2
	&write		$2

( Zero page variables )
|0000
@ZeroPageGlobals
	&rom-offset	$2
	&instruction	$1
	&opcode		$1
	&keep-mode	$1
	&short-mode	$1
	&return-mode	$1

|0100 ( entry point )
	#0000 .ZeroPageGlobals/rom-offset STZ2
	#0000 ;file-name-buffer-offset STA2
	;on-console .Console/vector DEO2
BRK

@on-console
	( Read intput file name )
	.Console/read DEI DUP
	( Write file name to file-name-buffer )
	#0a EQU ,&file-name-end JCN
	;file-name-buffer ;file-name-buffer-offset LDA2 ADD2 STA
	;file-name-buffer-offset LDA2 INC2 ;file-name-buffer-offset STA2
BRK
&file-name-end
	POP
	#00 ;file-name-buffer ;file-name-buffer-offset LDA2 ADD2 STA
	;file-name-buffer .File/name DEO2

@file-read-loop
	( read an instruction )
	.File/read DEI DUP
	.File/success DEI2 #0000 EQU2 ;eof JCN2
	.ZeroPageGlobals/instruction STZ

	( Set flags, current instruction is on the stack )
	DUP DUP DUP
	SHORT_MODE_MASK AND .ZeroPageGlobals/short-mode STZ
	RETURN_MODE_MASK AND .ZeroPageGlobals/return-mode STZ
	KEEP_MODE_MASK AND .ZeroPageGlobals/keep-mode STZ
	OPCODE_MASK AND DUP .ZeroPageGlobals/opcode STZ

	;emit-ram-offset JSR2 TAB

	( opcode is on the stack ) OPCODE_LIT NEQ ,&non-lit-opcode JCN
		;handle-lit JSR2
		NEWLINE
		;file-read-loop JMP2
	&non-lit-opcode

	( Print opcode name with flags )
	#00 .ZeroPageGlobals/opcode LDZ
	#0003 MUL2
	;opcode-name-table ADD2
	( TODO: Loop? )
	DUP2 DUP2
	LDA EMIT
	#0001 ADD2 LDA EMIT
	#0002 ADD2 LDA EMIT

	.ZeroPageGlobals/short-mode LDZ #00 EQU ,&after-print-short JCN
		#32 EMIT
	&after-print-short

	.ZeroPageGlobals/keep-mode LDZ #00 EQU ,&after-print-keep JCN
		#6b EMIT
	&after-print-keep

	.ZeroPageGlobals/return-mode LDZ #00 EQU ,&after-print-return JCN
		#72 EMIT
	&after-print-return

	TAB ;emit-instruction-as-comment JSR2

	NEWLINE
	.ZeroPageGlobals/rom-offset LDZ2 INC2 .ZeroPageGlobals/rom-offset STZ2
	;file-read-loop JMP2

( Handle LIT BRK or fallback to just raw data )
@handle-lit
	.ZeroPageGlobals/return-mode LDZ
	( TODO: Use stack instead of re-reading the variable )
	.ZeroPageGlobals/instruction LDZ #20 EQU ORA
	.ZeroPageGlobals/instruction LDZ #40 EQU ORA
	.ZeroPageGlobals/instruction LDZ #60 EQU ORA
	;emit-raw-byte JCN2

	.ZeroPageGlobals/keep-mode LDZ #00 EQU ;emit-brk JCN2

	.ZeroPageGlobals/short-mode LDZ ,&emit-short-literal JCN

&emit-byte-literal
	.ZeroPageGlobals/rom-offset LDZ2 .File/length DEI2 EQU2 ;emit-raw-byte JCN2
	#23 EMIT
	.File/read DEI DUP ( TODO: Check for errors )
	;emit-byte JSR2

	( Print bytes as comment )
	TAB
	#28 EMIT
	#20 EMIT
	.ZeroPageGlobals/instruction LDZ ;emit-byte JSR2
	;emit-byte JSR2
	#20 EMIT
	#29 EMIT

	.ZeroPageGlobals/rom-offset LDZ2 #0002 ADD2 .ZeroPageGlobals/rom-offset STZ2
JMP2r

&emit-short-literal
	.ZeroPageGlobals/rom-offset LDZ2 #0003 ADD2 .File/length DEI2 EQU2 ;emit-raw-byte JCN2
	#23 EMIT
	.File/read DEI ( TODO: Check for errors )
	.File/read DEI ( TODO: Check for errors )
	DUP2
	;emit-short JSR2

	( Print bytes as comment )
	TAB
	#28 EMIT
	#20 EMIT
	.ZeroPageGlobals/instruction LDZ ;emit-byte JSR2
	;emit-short JSR2
	#20 EMIT
	#29 EMIT

	.ZeroPageGlobals/rom-offset LDZ2 #0003 ADD2 .ZeroPageGlobals/rom-offset STZ2
JMP2r

@emit-raw-byte
	.ZeroPageGlobals/instruction LDZ ;emit-byte JSR2
	.ZeroPageGlobals/rom-offset LDZ2 INC2 .ZeroPageGlobals/rom-offset STZ2
JMP2r

@emit-brk
	#42 EMIT
	#52 EMIT
	#4b EMIT
	TAB ;emit-instruction-as-comment JSR2
	.ZeroPageGlobals/rom-offset LDZ2 INC2 .ZeroPageGlobals/rom-offset STZ2
JMP2r

@eof
	#01 .System/state DEO
	BRK ( Exit evaluation context so the state change will take effect )

@emit-instruction-as-comment
	#28 EMIT
	#20 EMIT
	.ZeroPageGlobals/instruction LDZ ;emit-byte JSR2
	#20 EMIT
	#29 EMIT
JMP2r

( Print address )
@emit-ram-offset
	#7c EMIT
	.ZeroPageGlobals/rom-offset LDZ2 #0100 ADD2
	;emit-short JMP2

( Print a number between 0 to 65535 to the screen in hexadecimal )
@emit-short ( short -- )
	SWP
	;emit-byte JSR2
	;emit-byte JMP2

( Print a number between 0 to 255 to the screen in hexadecimal )
@emit-byte ( byte -- )
	DUP
	#f0 AND #10 DIV ;emit-nibble JSR2
	#0f AND ;emit-nibble JMP2

( Print a number between 0 to 15 to the screen in hexadecimal )
@emit-nibble ( byte -- )
	#00 SWP ;hex-table ADD2 LDA EMIT
JMP2r

@hex-table
"0123456789
"abcdef

@opcode-name-table
"LIT
"INC
"POP
"NIP
"SWP
"ROT
"DUP
"OVR
"EQU
"NEQ
"GTH
"LTH
"JMP
"JCN
"JSR
"STH
"LDZ
"STZ
"LDR
"STR
"LDA
"STA
"DEI
"DEO
"ADD
"SUB
"MUL
"DIV
"AND
"ORA
"EOR
"SFT

@file-name-buffer-offset $2 ( TODO: $1 )
@file-name-buffer
